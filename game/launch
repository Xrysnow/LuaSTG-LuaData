package.cpath=package.cpath..';.\\?.dll'

-- 版本信息
_luastg_version=0x1000
_luastg_min_support=0x1000

for k,v in pairs(lstg) do _G[k]=v end
UnitList=ObjList
GetnUnit=GetnObj

ShowSplashWindow()
--[[
function Serialize(o)
    return cjson.encode(o)
end

function DeSerialize(s)
    return cjson.decode(s)
end
--]]
--
function Serialize(o)
    if type(o) == 'table' then
        -- 特殊处理：lstg中部分表将数据保存在metatable的data域中，因此对于table必须重新生成一个干净的table进行序列化操作
        function visitTable(t)
            local ret = {}
            if getmetatable(t) and getmetatable(t).data then
                t = getmetatable(t).data
            end
            for k,v in pairs(t) do
                if type(v) == 'table' then
                    ret[k] = visitTable(v)
                else
                    ret[k] = v
                end
            end
            return ret
        end
        o = visitTable(o)
    end
    return cjson.encode(o)
end

function DeSerialize(s)
    return cjson.decode(s)
end
--
-- 按键常量
KEY={NULL=0x00}

KEY.LBUTTON=0x01
KEY.RBUTTON=0x02
KEY.MBUTTON=0x04

KEY.ESCAPE=0x1B
KEY.BACKSPACE=0x08
KEY.TAB=0x09
KEY.ENTER=0x0D
KEY.SPACE=0x20

KEY.SHIFT=0x10
KEY.CTRL=0x11
KEY.ALT=0x12

KEY.LWIN=0x5B
KEY.RWIN=0x5C
KEY.APPS=0x5D

KEY.PAUSE=0x13
KEY.CAPSLOCK=0x14
KEY.NUMLOCK=0x90
KEY.SCROLLLOCK=0x91

KEY.PGUP=0x21
KEY.PGDN=0x22
KEY.HOME=0x24
KEY.END=0x23
KEY.INSERT=0x2D
KEY.DELETE=0x2E

KEY.LEFT=0x25
KEY.UP=0x26
KEY.RIGHT=0x27
KEY.DOWN=0x28

KEY['0']=0x30
KEY['1']=0x31
KEY['2']=0x32
KEY['3']=0x33
KEY['4']=0x34
KEY['5']=0x35
KEY['6']=0x36
KEY['7']=0x37
KEY['8']=0x38
KEY['9']=0x39

KEY.A=0x41
KEY.B=0x42
KEY.C=0x43
KEY.D=0x44
KEY.E=0x45
KEY.F=0x46
KEY.G=0x47
KEY.H=0x48
KEY.I=0x49
KEY.J=0x4A
KEY.K=0x4B
KEY.L=0x4C
KEY.M=0x4D
KEY.N=0x4E
KEY.O=0x4F
KEY.P=0x50
KEY.Q=0x51
KEY.R=0x52
KEY.S=0x53
KEY.T=0x54
KEY.U=0x55
KEY.V=0x56
KEY.W=0x57
KEY.X=0x58
KEY.Y=0x59
KEY.Z=0x5A

KEY.GRAVE=0xC0
KEY.MINUS=0xBD
KEY.EQUALS=0xBB
KEY.BACKSLASH=0xDC
KEY.LBRACKET=0xDB
KEY.RBRACKET=0xDD
KEY.SEMICOLON=0xBA
KEY.APOSTROPHE=0xDE
KEY.COMMA=0xBC
KEY.PERIOD=0xBE
KEY.SLASH=0xBF

KEY.NUMPAD0=0x60
KEY.NUMPAD1=0x61
KEY.NUMPAD2=0x62
KEY.NUMPAD3=0x63
KEY.NUMPAD4=0x64
KEY.NUMPAD5=0x65
KEY.NUMPAD6=0x66
KEY.NUMPAD7=0x67
KEY.NUMPAD8=0x68
KEY.NUMPAD9=0x69

KEY.MULTIPLY=0x6A
KEY.DIVIDE=0x6F
KEY.ADD=0x6B
KEY.SUBTRACT=0x6D
KEY.DECIMAL=0x6E

KEY.F1=0x70
KEY.F2=0x71
KEY.F3=0x72
KEY.F4=0x73
KEY.F5=0x74
KEY.F6=0x75
KEY.F7=0x76
KEY.F8=0x77
KEY.F9=0x78
KEY.F10=0x79
KEY.F11=0x7A
KEY.F12=0x7B

for i=1,32 do
    KEY['JOY1_'..i]=0x91+i
    KEY['JOY2_'..i]=0xDE+i
end

default_setting=
{
    allowsnapshot=true,
    username='User',
    font='',
    timezone=8,
    resx=640,
    resy=480,
    res=1,
    windowed=false,
    vsync=false,
    sevolume=100,
    bgmvolume=100,
    keys={
        up=KEY.UP,
        down=KEY.DOWN,
        left=KEY.LEFT,
        right=KEY.RIGHT,
        slow=KEY.SHIFT,
        shoot=KEY.Z,
        spell=KEY.X,
        special=KEY.C,
    },
    keys2={
        up=104,
        down=101,
        left=100,
        right=102,
        slow=65,
        shoot=83,
        spell=68,
        special=70,
    },
    keysys={
        repfast=KEY.CTRL,
        repslow=KEY.SHIFT,
        menu=KEY.ESCAPE,
        snapshot=KEY.HOME,
        retry=KEY.R,
        renderdebug=KEY.F6,
    },
}

default_network=
{
    server='127.0.0.1',
    port=26033,
    name='LSTGPlayer',
    delay=-1
}
--[[
do
    local f,msg
    f,msg=io.open('setting','r')
    if f==nil then
        setting=DeSerialize(Serialize(default_setting))
    else
        setting=DeSerialize(f:read('*a'))
        f:close()
    end
end
]]
-- Serialize和DeSerialize应该没必要在弄个Serialize1和DeSerialize1出来，应该不会有兼容性问题吧
-- 原版的Serialize和DeSerialize存在注入问题，建议否决
loadNetwork = function()
    f,msg=io.open('network.txt','r')
    if f==nil then
        network=DeSerialize(Serialize(default_network))
    else
        network=DeSerialize(f:read('*a'))
        f:close()
    end
end
loadConfigure = function()
    local f,msg
    f,msg=io.open('setting','r')
    if f==nil then
        setting=DeSerialize(Serialize(default_setting))
    else
        setting=DeSerialize(f:read('*a'))
        f:close()
    end
    loadNetwork()
end
-- 先装载一次配置
loadConfigure()

if setting.showcfg == nil or setting.showcfg == true then
    -- 不使用os.execute以防止出现控制台
    -- 新函数Execute
    --Execute("GameConfigurer.exe")

    -- 重新加载配置
    loadConfigure()
end

if #args>=2 then loadstring(args[2])() end

if not start_game then
    setting.mod='launcher'
    setting.resx=480
    setting.resy=640
    setting.windowed=true
    setting.nosplash=true
    setting.allowsnapshot=false
end

if updatelib then
    lfs.chdir('data')
    os.execute('..\\..\\tools\\7z\\7z.exe u -tzip -mcu=on -r ..\\data.zip *')
    lfs.chdir('..')
end

if not (lfs.attributes('data.zip')==nil) then
    LoadPack('data.zip')
end
if setting.mod~='launcher' then
    LoadPack('mod\\'..setting.mod..'.zip')--正常加载mod
elseif lfs.attributes('launcher.lua')==nil then
    if not lfs.attributes('mod\\'..setting.mod..'.zip')==nil then
        LoadPack('mod\\'..setting.mod..'.zip')--正常加载启动器
    end
else
    --什么也不做
end

SetSplash(false)
SetTitle(setting.mod)
SetWindowed(setting.windowed)
SetResolution(setting.resx,setting.resy)
SetFPS(60)
SetVsync(setting.vsync)
SetSEVolume(setting.sevolume)
SetBGMVolume(setting.bgmvolume)
